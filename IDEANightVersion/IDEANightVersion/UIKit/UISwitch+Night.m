//
//  UISwitch+Night.m
//  UISwitch+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UISwitch+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface UISwitch ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, DKPicker> *pickers;

@end

@implementation UISwitch (Night)

- (DKColorPicker)onTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(onTintColorPicker));
}

- (void)setOnTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(onTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.onTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setOnTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setOnTintColor:"];
      
   } /* End else */
   
   return;
}

- (DKColorPicker)thumbTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(thumbTintColorPicker));
}

- (void)setThumbTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(thumbTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.thumbTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setThumbTintColor:"];
      
   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setThumbTintColor:"];
      
   } /* End else */
   
   return;
}

- (DKImagePicker)onImagePicker {
   
   return objc_getAssociatedObject(self, @selector(onImagePicker));
}

- (void)setOnImagePicker:(DKImagePicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(onImagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   self.onImage   = aPicker(self.themeManager.themeVersion);
   [self.pickers setValue:[aPicker copy] forKey:@"setOnImage:"];

   return;
}

- (DKImagePicker)offImagePicker {
   
   return objc_getAssociatedObject(self, @selector(offImagePicker));
}

- (void)setOffImagePicker:(DKImagePicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(offImagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   self.offImage  = aPicker(self.themeManager.themeVersion);
   [self.pickers setValue:[aPicker copy] forKey:@"setOffImage:"];

   return;
}

// Harry FIXED
- (void)night_updateColor {
   
   [self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aSelector, DKPicker _Nonnull aPicker, BOOL * _Nonnull aStop) {
      
      if ([aSelector isEqualToString:NSStringFromSelector(@selector(setOnTintColor:))]) {
         UIColor *stColor = ((DKColorPicker)aPicker)(self.themeManager.themeVersion);
         [self setOnTintColor:stColor];
      }
      else if ([aSelector isEqualToString:NSStringFromSelector(@selector(setThumbTintColor:))]) {
         UIColor *stColor = ((DKColorPicker)aPicker)(self.themeManager.themeVersion);
         [self setThumbTintColor:stColor];
      }
      else {
         
         SEL stSEL      = NSSelectorFromString(aSelector);
         id  stResult   = aPicker(self.themeManager.themeVersion);

         [UIView animateWithDuration:DKNightVersionAnimationDuration
                          animations:^{
      #pragma clang diagnostic push
      #pragma clang diagnostic ignored "-Warc-performSelector-leaks"
            [self performSelector:stSEL withObject:stResult];
      #pragma clang diagnostic pop
         }];
      } /* End else */
   }];
}

@end
