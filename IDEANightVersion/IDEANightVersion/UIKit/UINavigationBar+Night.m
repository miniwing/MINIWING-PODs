//
//  UINavigationBar+Night.m
//  UINavigationBar+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "DKNightVersionManager.h"
#import "UINavigationBar+Night.h"

@interface UINavigationBar ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, id> *pickers;

@end

@implementation UINavigationBar (Night)

- (DKColorPicker)barTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(barTintColorPicker));
}

- (void)setBarTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(barTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   
   if (nil != aPicker) {

      self.barTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setBarTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setBarTintColor:"];

   } /* End else */
   
   return;
}

- (DKColorPicker)tintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(tintColorPicker));
}

- (void)setTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(tintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   
   if (nil != aPicker) {

      self.tintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setTintColor:"];

   } /* End else */
   
   return;
}

- (DKAttributesPicker)titleTextAttributesPicker {
   
   return objc_getAssociatedObject(self, @selector(titleTextAttributesPicker));
}

- (void)setTitleTextAttributesPicker:(DKAttributesPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(titleTextAttributesPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {

      self.titleTextAttributes = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setTitleTextAttributes:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setTitleTextAttributes:"];

   } /* End else */
   
   return;
}

- (void)setBackgroundImagePicker:(DKImagePicker)aPicker forBarMetrics:(UIBarMetrics)aBarMetrics {
      
   NSString             *szKey         = [NSString stringWithFormat:@"%@", @(aBarMetrics)];

   if (nil != aPicker) {
      
      NSMutableDictionary  *stDictionary  = [self.pickers valueForKey:szKey];
      
      if (!stDictionary) {
         
         stDictionary = [NSMutableDictionary dictionary];
         
      } /* End if () */
      
      [stDictionary setValue:[aPicker copy] forKey:NSStringFromSelector(@selector(setBackgroundImage:forBarMetrics:))];
      [self.pickers setValue:stDictionary forKey:szKey];

      [self setBackgroundImage:aPicker(self.themeManager.themeVersion) forBarMetrics:aBarMetrics];

   } /* End if () */
   else {

      [self.pickers removeObjectForKey:szKey];
      
   } /* End else */
      
   return;
}

- (void)setShadowImagePicker:(DKImagePicker)aPicker {

//   objc_setAssociatedObject(self, @selector(setShadowImagePicker:), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
            
      [self.pickers setValue:[aPicker copy] forKey:@"setShadowImage:"];

      self.shadowImage  = aPicker(self.themeManager.themeVersion);

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setShadowImage:"];

   } /* End else */
   
   return;
}

- (void)night_updateColor:(NSNotification *)aNotification {

   [self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aKey, id _Nonnull aObject, BOOL * _Nonnull aStop) {
      
      if ([aObject isKindOfClass:[NSDictionary class]]) {
         
         NSDictionary<NSString *, DKPicker>  *stDictionary  = (NSDictionary *)aObject;
         
         [stDictionary enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aSelector, DKPicker _Nonnull aPicker, BOOL * _Nonnull aStop) {
            
            UIBarMetrics eMetrics = [aKey integerValue];
            
            [UIView transitionWithView:self
                              duration:DKNightVersionAnimationDuration
                               options:UIViewAnimationOptionTransitionCrossDissolve
                            animations:^{
               
               if ([aSelector isEqualToString:NSStringFromSelector(@selector(setBackgroundImage:forBarMetrics:))]) {
                  UIImage  *stImage = aPicker(self.themeManager.themeVersion);
                  
                  [self setBackgroundImage:stImage forBarMetrics:eMetrics];
                  
               } /* End if () */
            }
                            completion:nil];
         }];
         
      } /* End if () */
      else {
         SEL       stSEL      = NSSelectorFromString(aKey);
         DKPicker  stPicker   = (DKPicker)aObject;
         id        stResult   = stPicker(self.themeManager.themeVersion);
         
         [UIView animateWithDuration:DKNightVersionAnimationDuration
                          animations:^{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
            [self performSelector:stSEL withObject:stResult];
#pragma clang diagnostic pop
         }];
         
      } /* End else */
   }];
   
   return;
}

@end
