//
//  UISearchBar+Night.m
//  UISearchBar+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UISearchBar+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface UISearchBar ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers;

@end

@implementation UISearchBar (Night)

+ (void)load {
   
   static dispatch_once_t onceToken;
   
   dispatch_once(&onceToken, ^{
      
      Class  stClass          = [self class];
      
      SEL    originalSelector = @selector(init);
      SEL    swizzledSelector = @selector(dk_init);
      
      Method originalMethod   = class_getInstanceMethod(stClass, originalSelector);
      Method swizzledMethod   = class_getInstanceMethod(stClass, swizzledSelector);
      
      BOOL   didAddMethod     = class_addMethod(stClass,
                                                originalSelector,
                                                method_getImplementation(swizzledMethod),
                                                method_getTypeEncoding(swizzledMethod));
      
      if (didAddMethod) {
         
         class_replaceMethod(stClass,
                             swizzledSelector,
                             method_getImplementation(originalMethod),
                             method_getTypeEncoding(originalMethod));
         
      } /* End if () */
      else {
         
         method_exchangeImplementations(originalMethod, swizzledMethod);
         
      } /* End else */
      
      originalSelector  = @selector(initWithCoder:);
      swizzledSelector  = @selector(dk_initWithCoder:);
      
      originalMethod    = class_getInstanceMethod(stClass, originalSelector);
      swizzledMethod    = class_getInstanceMethod(stClass, swizzledSelector);
      
      didAddMethod      = class_addMethod(stClass,
                                          originalSelector,
                                          method_getImplementation(swizzledMethod),
                                          method_getTypeEncoding(swizzledMethod));
      
      if (didAddMethod) {
         
         class_replaceMethod(stClass,
                             swizzledSelector,
                             method_getImplementation(originalMethod),
                             method_getTypeEncoding(originalMethod));
         
      } /* End if () */
      else {
         
         method_exchangeImplementations(originalMethod, swizzledMethod);
         
      } /* End else */
      
      originalSelector  = @selector(initWithFrame:);
      swizzledSelector  = @selector(dk_initWithFrame:);
      
      originalMethod    = class_getInstanceMethod(stClass, originalSelector);
      swizzledMethod    = class_getInstanceMethod(stClass, swizzledSelector);
      
      didAddMethod      = class_addMethod(stClass,
                                          originalSelector,
                                          method_getImplementation(swizzledMethod),
                                          method_getTypeEncoding(swizzledMethod));
      
      if (didAddMethod) {
         
         class_replaceMethod(stClass,
                             swizzledSelector,
                             method_getImplementation(originalMethod),
                             method_getTypeEncoding(originalMethod));
         
      } /* End if () */
      else {
         
         method_exchangeImplementations(originalMethod, swizzledMethod);
         
      } /* End else */
   });
   
   return;
}

- (instancetype)dk_init {
   
   UISearchBar    *stSearchBar      = [self dk_init];
   
   [stSearchBar pickers];

   if (self.themeManager.supportsKeyboard) {
      
      if ([self.themeManager.themeVersion isEqualToString:DKThemeVersionNight]) {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceDark;
         
      } /* End if () */
      else {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceLight;
         
      } /* End else */
      
   } /* End if () */

   return stSearchBar;
}

- (instancetype)dk_initWithCoder:(NSCoder *)aCoder {
   
   UISearchBar    *stSearchBar      = [self dk_initWithCoder:aCoder];
   
   [stSearchBar pickers];

   if (self.themeManager.supportsKeyboard) {
      
      if ([self.themeManager.themeVersion isEqualToString:DKThemeVersionNight]) {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceDark;
         
      } /* End if () */
      else {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceLight;
         
      } /* End else */
      
   } /* End if () */

   return stSearchBar;
}

- (instancetype)dk_initWithFrame:(CGRect)aFrame {
   
   UISearchBar    *stSearchBar      = [self dk_initWithFrame:aFrame];
   
   [stSearchBar pickers];

   if (self.themeManager.supportsKeyboard) {
      
      if ([self.themeManager.themeVersion isEqualToString:DKThemeVersionNight]) {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceDark;
         
      } /* End if () */
      else {
         
         stSearchBar.keyboardAppearance   = UIKeyboardAppearanceLight;
         
      } /* End else */
      
   } /* End if () */

   return stSearchBar;
}

- (DKColorPicker)barTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(barTintColorPicker));
}

- (void)setBarTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(barTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.barTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setBarTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setBarTintColor:"];
      
   } /* End else */
   
   return;
}

- (void)night_updateColor:(NSNotification *)aNotification {

//   UITextField *stTextField   = nil;
//
//   if (@available(iOS 13.0, *)) {
//
//      stTextField = self.searchTextField;
//
//   } /* End if () */
//   else {
//
//      stTextField = [self valueForKey:@"_searchField"];
//
//   } /* End else */

   [self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aSelector, DKPicker _Nonnull aPicker, BOOL * _Nonnull aStop) {
      
      SEL stSEL      = NSSelectorFromString(aSelector);
      id  stResult   = aPicker(self.themeManager.themeVersion);
      
      [UIView animateWithDuration:DKNightVersionAnimationDuration
                       animations:^{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
         [self performSelector:stSEL withObject:stResult];
#pragma clang diagnostic pop
      }];
   }];
   
   if (self.themeManager.supportsKeyboard) {
      
      if ([self.themeManager.themeVersion isEqualToString:DKThemeVersionNight]) {
         
#ifdef __IPHONE_7_0
         self.keyboardAppearance = UIKeyboardAppearanceDark;
#else
         self.keyboardAppearance = UIKeyboardAppearanceDefault;
#endif
      } /* End if () */
      else {
#ifdef __IPHONE_7_0
         self.keyboardAppearance = UIKeyboardAppearanceLight;
#else
         self.keyboardAppearance = UIKeyboardAppearanceDefault;
#endif
      } /* End else */

      if (@available(iOS 13.0, *)) {
         
      } /* End if () */
      else {

#warning " 刷新键盘外观 "

         UITextField *stTextField   = [self valueForKey:@"_searchField"];

         if (nil != stTextField) {
            
//            [UIView performWithoutAnimation:^{
//
//               [stTextField resignFirstResponder];
//               [stTextField becomeFirstResponder];
//            }];

            [stTextField resignFirstResponder];

         } /* End if () */
         
      } /* End else */
      
   } /* End if () */

   return;
}

@end
