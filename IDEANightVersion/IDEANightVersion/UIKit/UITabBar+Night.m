//
//  UITabBar+Night.m
//  UITabBar+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UITabBar+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface UITabBar ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, DKPicker> *pickers;

@end

@implementation UITabBar (Night)

- (DKColorPicker)barTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(barTintColorPicker));
}

- (void)setBarTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(barTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.barTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setBarTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setBarTintColor:"];
      
   } /* End else */
   
   return;
}

- (DKColorPicker)unselectedItemTintColorPicker {
   
   return objc_getAssociatedObject(self, @selector(unselectedItemTintColorPicker));
}

- (void)setUnselectedItemTintColorPicker:(DKColorPicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(unselectedItemTintColorPicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.unselectedItemTintColor = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setUnselectedItemTintColor:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setUnselectedItemTintColor:"];
      
   } /* End else */
   
   return;
}

- (DKImagePicker)backgroundImagePicker {
   
   return objc_getAssociatedObject(self, @selector(backgroundImagePicker));
}

- (void)setBackgroundImagePicker:(DKImagePicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(backgroundImagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   
   if (nil != aPicker) {
      
      self.backgroundImage = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setBackgroundImage:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setBackgroundImage:"];
      
   } /* End else */
   
   return;
}

- (DKImagePicker)shadowImagePicker {
   
   return objc_getAssociatedObject(self, @selector(shadowImagePicker));
}

- (void)setShadowImagePicker:(DKImagePicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(shadowImagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);

   if (nil != aPicker) {
      
      self.shadowImage = aPicker(self.themeManager.themeVersion);
      [self.pickers setValue:[aPicker copy] forKey:@"setShadowImage:"];
      
   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setShadowImage:"];
      
   } /* End else */
   
   return;
}

//// Harry FIXED
//- (void)night_updateColor:(NSNotification *)aNotification {
//
//   [self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aSelector, DKPicker _Nonnull aPicker, BOOL * _Nonnull aStop) {
//      
//      if ([aSelector isEqualToString:NSStringFromSelector(@selector(setShadowImage:))]) {
//         
//         UIImage  *stImage = ((DKImagePicker)aPicker)(self.themeManager.themeVersion);
//         [self setShadowImage:stImage];
//      }
//      else if ([aSelector isEqualToString:NSStringFromSelector(@selector(setBackgroundImage:))]) {
//         
//         UIImage  *stImage = ((DKImagePicker)aPicker)(self.themeManager.themeVersion);
//         [self setBackgroundImage:stImage];
//      }
//      else {
//         
//         SEL stSEL      = NSSelectorFromString(aSelector);
//         id  stResult   = aPicker(self.themeManager.themeVersion);
//
//         [UIView animateWithDuration:DKNightVersionAnimationDuration
//                          animations:^{
//      #pragma clang diagnostic push
//      #pragma clang diagnostic ignored "-Warc-performSelector-leaks"
//            [self performSelector:stSEL withObject:stResult];
//      #pragma clang diagnostic pop
//         }];
//      } /* End else */
//   }];
//}

@end
