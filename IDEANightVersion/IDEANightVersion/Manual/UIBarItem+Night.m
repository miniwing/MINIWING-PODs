//
//  UIBarItem+Night.m
//  UIBarItem+Night
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UIBarItem+Night.h"
#import "DKNightVersionManager.h"
#import <objc/runtime.h>

@interface UIBarItem ()

@property (nonatomic, strong) NSMutableDictionary<NSString *, id> *pickers;

@end

@implementation UIBarItem (Night)

- (DKImagePicker)imagePicker {
   
   return objc_getAssociatedObject(self, @selector(imagePicker));
}

- (void)setImagePicker:(DKImagePicker)aPicker {
   
   objc_setAssociatedObject(self, @selector(imagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
   
   self.image = aPicker(self.themeManager.themeVersion);
   
   if (nil != aPicker) {
      
      [self.pickers setValue:[aPicker copy] forKey:@"setImage:"];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:@"setImage:"];

   } /* End else */
   
   return;
}

//- (DKImagePicker)selectedImagePicker {
//
//   return objc_getAssociatedObject(self, @selector(imagePicker));
//}
//
//- (void)setImagePicker:(DKImagePicker)aPicker {
//
//   objc_setAssociatedObject(self, @selector(setSelectedImagePicker), aPicker, OBJC_ASSOCIATION_COPY_NONATOMIC);
//
//   self.image = aPicker(self.themeManager.themeVersion);
//
//   [self.pickers setValue:[aPicker copy] forKey:@"setSelectedImage:"];
//
//   return;
//}

- (void)setTitleTextAttributesPicker:(DKAttributesPicker)aPicker forState:(UIControlState)aState {
   
   [self setTitleTextAttributes:aPicker(self.themeManager.themeVersion) forState:aState];
   
   NSString *szKey   = [NSString stringWithFormat:@"setTitleTextAttributes:forState:%@", @(aState)];
   
   if (nil != aPicker) {
      
      NSMutableDictionary  *stDictionary  = [self.pickers valueForKey:szKey];
      
      if (!stDictionary) {
         
         stDictionary = [NSMutableDictionary dictionary];
         
      } /* End if () */
      
      [stDictionary setValue:[aPicker copy] forKey:NSStringFromSelector(@selector(setTitleTextAttributes:forState:))];
      [self.pickers setValue:stDictionary forKey:szKey];

   } /* End if () */
   else {
      
      [self.pickers removeObjectForKey:szKey];
      
   } /* End else */
      
   return;
}

- (void)night_updateColor:(NSNotification *)aNotification {

   [self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull aKey, id  _Nonnull aObject, BOOL * _Nonnull aStop) {
      
      if ([aObject isKindOfClass:[NSDictionary class]]) {
         
         NSDictionary<NSString *, DKPicker> *stDictionary = (NSDictionary *)aObject;
         
         [stDictionary enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull selector, DKPicker _Nonnull aPicker, BOOL * _Nonnull aStop) {
            
            UIControlState state = [aKey integerValue];
            
            [UIView animateWithDuration:DKNightVersionAnimationDuration
                             animations:^{
               
               if ([selector isEqualToString:NSStringFromSelector(@selector(setTitleTextAttributes:forState:))]) {
                  
                  NSDictionary   *stAttributes  = ((DKAttributesPicker)aPicker)(self.themeManager.themeVersion);
                  
                  [self setTitleTextAttributes:stAttributes forState:state];
               }
               else if ([selector isEqualToString:NSStringFromSelector(@selector(setImage:))]) {
                  
                  UIImage *stImage = ((DKImagePicker)aPicker)(self.themeManager.themeVersion);
                  
                  [self setImage:stImage];
               }
            }];
         }];
      }
      else {
         SEL    stSEL   = NSSelectorFromString(aKey);
         DKPicker  stPicker   = aObject;
         id        stResult   = stPicker(self.themeManager.themeVersion);
         [UIView animateWithDuration:DKNightVersionAnimationDuration
                          animations:^{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
            [self performSelector:stSEL withObject:stResult];
#pragma clang diagnostic pop
         }];
      }
   }];
}

@end
